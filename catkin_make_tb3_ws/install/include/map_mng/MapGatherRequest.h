// Generated by gencpp from file map_mng/MapGatherRequest.msg
// DO NOT EDIT!


#ifndef MAP_MNG_MESSAGE_MAPGATHERREQUEST_H
#define MAP_MNG_MESSAGE_MAPGATHERREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace map_mng
{
template <class ContainerAllocator>
struct MapGatherRequest_
{
  typedef MapGatherRequest_<ContainerAllocator> Type;

  MapGatherRequest_()
    : action()
    , params()  {
    }
  MapGatherRequest_(const ContainerAllocator& _alloc)
    : action(_alloc)
    , params(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _action_type;
  _action_type action;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _params_type;
  _params_type params;





  typedef boost::shared_ptr< ::map_mng::MapGatherRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::map_mng::MapGatherRequest_<ContainerAllocator> const> ConstPtr;

}; // struct MapGatherRequest_

typedef ::map_mng::MapGatherRequest_<std::allocator<void> > MapGatherRequest;

typedef boost::shared_ptr< ::map_mng::MapGatherRequest > MapGatherRequestPtr;
typedef boost::shared_ptr< ::map_mng::MapGatherRequest const> MapGatherRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::map_mng::MapGatherRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::map_mng::MapGatherRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::map_mng::MapGatherRequest_<ContainerAllocator1> & lhs, const ::map_mng::MapGatherRequest_<ContainerAllocator2> & rhs)
{
  return lhs.action == rhs.action &&
    lhs.params == rhs.params;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::map_mng::MapGatherRequest_<ContainerAllocator1> & lhs, const ::map_mng::MapGatherRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace map_mng

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::map_mng::MapGatherRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::map_mng::MapGatherRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::map_mng::MapGatherRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::map_mng::MapGatherRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::map_mng::MapGatherRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::map_mng::MapGatherRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::map_mng::MapGatherRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f353b7f7969baa08184b6647402edb66";
  }

  static const char* value(const ::map_mng::MapGatherRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf353b7f7969baa08ULL;
  static const uint64_t static_value2 = 0x184b6647402edb66ULL;
};

template<class ContainerAllocator>
struct DataType< ::map_mng::MapGatherRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "map_mng/MapGatherRequest";
  }

  static const char* value(const ::map_mng::MapGatherRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::map_mng::MapGatherRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string action\n"
"string[] params\n"
;
  }

  static const char* value(const ::map_mng::MapGatherRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::map_mng::MapGatherRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.action);
      stream.next(m.params);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MapGatherRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::map_mng::MapGatherRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::map_mng::MapGatherRequest_<ContainerAllocator>& v)
  {
    s << indent << "action: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.action);
    s << indent << "params[]" << std::endl;
    for (size_t i = 0; i < v.params.size(); ++i)
    {
      s << indent << "  params[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.params[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAP_MNG_MESSAGE_MAPGATHERREQUEST_H
